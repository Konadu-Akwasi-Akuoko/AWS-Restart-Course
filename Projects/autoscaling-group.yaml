Parameters:
  AvailabilityZone:
    Description: The Availability Zone of the subnet
    Type: AWS::EC2::AvailabilityZone::Name
    Default: eu-west-2a
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: public-vpc
        - Key: Unit
          Value: vpc
        - Key: User
          Value: akwasi
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.168.0.0/22
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: akwasi-public-subnet
        - Key: Unit
          Value: subnet
        - Key: User
          Value: akwasi
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: akwasi-igw
        - Key: Unit
          Value: internet-gateway
        - Key: User
          Value: akwasi
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyIGW
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: akwasi-public-route-table
        - Key: Unit
          Value: route-table
        - Key: User
          Value: akwasi
  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref MyRouteTable
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for network access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  MyLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0e5f882be1900e43b
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref MySecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZone
      LaunchConfigurationName: !Ref MyLaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref MySubnet
      Tags:
        - Key: Name
          Value: akwasi-autoscaling-group
          PropagateAtLaunch: true
        - Key: Unit
          Value: autoscaling-group
          PropagateAtLaunch: true
        - Key: User
          Value: akwasi
          PropagateAtLaunch: true
  ScaleupUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      Cooldown: '120'
      ScalingAdjustment: 1
      PolicyType: SimpleScaling
  ScaledDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      Cooldown: '120'
      ScalingAdjustment: -1
      PolicyType: SimpleScaling
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: '120'
      EvaluationPeriods: 1
      Threshold: 50
      AlarmActions:
        - !Ref ScaleupUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScalingGroup
      ComparisonOperator: GreaterThanOrEqualToThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: Alarm if CPU too low
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: '120'
      EvaluationPeriods: 1
      Threshold: 20
      AlarmActions:
        - !Ref ScaledDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScalingGroup
      ComparisonOperator: LessThanOrEqualToThreshold
Outputs:
  SecurityGroupId:
    Description: The ID of the created security group
    Value: !Ref MySecurityGroup
  VPCId:
    Description: The ID of the created VPC
    Value: !Ref MyVPC
  SubnetId:
    Description: The ID of the created subnet
    Value: !Ref MySubnet
  InternetGatewayId:
    Description: The ID of the created internet gateway
    Value: !Ref MyIGW
  RouteTableId:
    Description: The ID of the created route table
    Value: !Ref MyRouteTable
  LaunchConfigurationName:
    Description: The name of the launch configuration.
    Value: !Ref MyLaunchConfiguration
  AutoScalingGroupName:
    Description: The name of the Auto Scaling group.
    Value: !Ref MyAutoScalingGroup
  HighCPUAlarmARN:
    Description: The name of the high CPU utilization alarm
    Value: !Ref CPUAlarmHigh
  LowCPUAlarmARN:
    Description: The name of the low CPU utilization alarm
    Value: !Ref CPUAlarmLow